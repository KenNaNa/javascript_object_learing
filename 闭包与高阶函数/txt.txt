变量作用域
指的是变量的有效范围
当一个变量声明时，没有var时，就会被挂载到全局中，
成为全局变量
在 JavaScript 中，函数可以用来创造函数作用域。此时的函数像一层半透明的玻璃，在函数
里面可以看到外面的变量，而在函数外面则无法看到函数里面的变量。这是因为当在函数中搜索
一个变量的时候，如果该函数内并没有声明这个变量，那么此次搜索的过程会随着代码执行环境
创建的作用域链往外层逐层搜索，一直搜索到全局对象为止。变量的搜索是从内到外而非从外到
内的。

除了变量的作用域之外，另外一个跟闭包有关的概念是变量的生存周期。
对于全局变量来说，全局变量的生存周期当然是永久的，除非我们主动销毁这个全局变量。
而对于在函数内用 var 关键字声明的局部变量来说，当退出函数时，这些局部变量即失去了
它们的价值，它们都会随着函数调用的结束而被销毁


当退出函数后，局部变量 a 并没有消失，而是似乎一直在某个地方
存活着。这是因为当执行 var f = func();时， f 返回了一个匿名函数的引用，它可以访问到 func()
被调用时产生的环境，而局部变量 a 一直处在这个环境里。既然局部变量所在的环境还能被外界
访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起
来被延续了

无论点击哪个 div，最后弹出的结果都是 5。这是因为 div 节点的
onclick 事件是被异步触发的，当事件被触发的时候， for 循环早已结束，此时变量 i 的值已经是
5，所以在 div 的 onclick 事件函数中顺着作用域链从内到外查找变量 i 时，查找到的值总是 5。

过程与数据的结合是形容面向对象中的“对象”时经常使用的表达。对象以方法的形式包含
了过程，而闭包则是在过程中以环境的形式包含了数据。通常用面向对象思想能实现的功能，用
闭包也能实现。反之亦然。在 JavaScript 语言的祖先 Scheme 语言中，甚至都没有提供面向对象
的原生设计，但可以使用闭包来实现一个完整的面向对象系统