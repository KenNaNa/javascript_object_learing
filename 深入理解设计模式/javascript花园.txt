介绍
JavaScript Garden是越来越多关于JavaScript编程语言最古怪部分的文档集合。它提供了一些建议，以避免常见的错误和细微的错误，以及性能问题和不好的做法，非专业JavaScript程序员可能会遇到他们的努力深入语言。

JavaScript的花园并没有旨在教你的JavaScript。强烈建议您先了解该语言，以便了解本指南中涵盖的主题。为了学习该语言的基础知识，请参阅Mozilla开发者网络上的优秀指南。

作者
本指南是两位可爱的Stack Overflow用户Ivo Wetzel （写作）和Zhang Yi Jiang（设计）的作品。

它目前由Tim Ruffles维护。

贡献者
这里列出的太多，请查看所有贡献者。
主机
JavaScript Garden托管在GitHub上，但Cramer Development在JavaScriptGarden.info上使用镜像支持我们。

执照
JavaScript Garden在MIT许可下发布并托管在 GitHub上。如果您发现错误或错别字，请在存储库上提出问题或拉取请求。您也可以在Stack Overflow聊天的JavaScript室找到我们。

对象
对象使用和属性
JavaScript中的所有东西都像对象一样，唯一的例外是 null和undefined。

false.toString(); // 'false'
[1, 2, 3].toString(); // '1,2,3'

function Foo(){}
Foo.bar = 1;
Foo.bar; // 1
一个常见的误解是数字文字不能用作对象。这是因为JavaScript解析器中的缺陷试图将数字上的点符号解析为浮点文字。

2.toString(); // raises SyntaxError
有几个解决方法可以用来使数字文字充当对象。

2..toString(); // the second point is correctly recognized
2 .toString(); // note the space left to the dot
(2).toString(); // 2 is evaluated first
对象作为数据类型
JavaScript中的对象也可以用作Hashmaps ; 它们主要由映射到值的命名属性组成。

使用对象文字 - {}符号 - 可以创建一个普通对象。这个新对象继承自Object.prototype并没有定义自己的属性。

var foo = {}; // a new empty object

// a new object with a 'test' property with value 12
var bar = {test: 12}; 
访问属性
可以通过点符号或方括号表示法以两种方式访问​​对象的属性。

var foo = {name: 'kitten'}
foo.name; // kitten
foo['name']; // kitten

var get = 'name';
foo[get]; // kitten

foo.1234; // SyntaxError
foo['1234']; // works
符号的工作原理几乎完全相同，唯一的区别是方括号表示法允许动态设置属性以及使用属性名称，否则会导致语法错误。

删除属性
从对象中移除属性的唯一方法是使用delete 操作符; 将该属性设置为undefined或null仅删除与该属性相关的 值，但不是该键。

var obj = {
    bar: 1,
    foo: 2,
    baz: 3
};
obj.bar = undefined;
obj.foo = null;
delete obj.baz;

for(var i in obj) {
    if (obj.hasOwnProperty(i)) {
        console.log(i, '' + obj[i]);
    }
}
上面的输出bar undefined和foo null- 仅baz被删除，因此从输出中丢失。

键符号
var test = {
    'case': 'I am a keyword, so I must be notated as a string',
    delete: 'I am a keyword, so me too' // raises SyntaxError
};
对象属性可以被标记为普通字符和字符串。由于JavaScript解析器中的另一个错误设计，上述将抛出SyntaxErrorECMAScript 5之前的版本。

一个事实，即出现此错误delete是一个关键词 ; 因此，必须将其注释为字符串文字以确保它将被旧版JavaScript引擎正确解释。

原型
JavaScript不具有经典的继承模型; 相反，它使用 原型。

虽然这经常被认为是JavaScript的弱点之一，但原型继承模型事实上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单，反过来则是一项艰巨的任务。

JavaScript是唯一使用原型继承的广泛使用的语言，因此需要时间来适应两种模型之间的差异。

第一个主要区别是JavaScript中的继承使用原型链。

注意：简单使用Bar.prototype = Foo.prototype会导致两个对象共享相同的原型。因此，对任何一个对象的原型进行更改都会影响另一个对象的原型，而这在大多数情况下并不是所期望的效果。

function Foo() {
    this.value = 42;
}
Foo.prototype = {
    method: function() {}
};

function Bar() {}

// Set Bar's prototype to a new instance of Foo
Bar.prototype = new Foo();
Bar.prototype.foo = 'Hello World';

// Make sure to list Bar as the actual constructor
Bar.prototype.constructor = Bar;

var test = new Bar(); // create a new bar instance

// The resulting prototype chain
test [instance of Bar]
    Bar.prototype [instance of Foo]
        { foo: 'Hello World' }
        Foo.prototype
            { method: ... }
            Object.prototype
                { toString: ... /* etc. */ }
在上面的代码中，该对象test将继承Bar.prototype和 Foo.prototype; 因此，它将有权访问method定义的功能Foo。它也可以访问其原型value的 一个 Foo实例的属性。重要的是要注意，new Bar()并没有创建一个新的Foo实例，但重复使用分配给它的原型之一; 因此，所有Bar实例将共享相同的 value属性。

注意：千万不能使用Bar.prototype = Foo，因为它不会指向的原型Foo，而是函数对象Foo。所以原型链将会结束Function.prototype而不是Foo.prototype; 因此，method不会在原型链上。

属性查找
当访问对象的属性时，JavaScript将向上遍历原型链，直到找到具有所请求名称的属性。

如果它到达链的顶部 - 即Object.prototype- 并且仍然没有找到指定的属性，它将返回未定义的值 。

原型属性
虽然原型属性被语言用来构建原型链，但仍可以为其分配任何给定的值。然而，当原型被指定为原型时，基元将简单地被忽略。

function Foo() {}
Foo.prototype = 1; // no effect
如上例所示，分配对象可以工作，并且可以动态创建原型链。

性能
原型链上的属性的查找时间可能会对性能产生负面影响，而这在性能至关重要的代码中可能很重要。此外，尝试访问不存在的属性将始终遍历完整的原型链。

此外，迭代对象的 属性时，将枚举原型链上的每个属性。

原生原型的扩展
常常使用的一个错误特征是扩展Object.prototype或其他内置原型中的一个。

这种技术被称为猴子修补并破坏封装。虽然Prototype等流行框架使用了这种框架，但仍然没有充分的理由让内置类型与其他非标准功能混淆。

扩展内置原型的唯一好处是回溯新JavaScript引擎的功能; 例如 Array.forEach。

结论是
在编写使用它的复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，本机的原型应该永远不会延长，除非它是兼容的，为了与新的JavaScript功能。

hasOwnProperty
为了检查一个对象是否有自己定义的属性，而不是它的原型链上的某处，有必要使用hasOwnProperty所有对象继承的 方法Object.prototype。

注意：这是不足够的，检查属性是否为undefined。该物业可能非常适合存在，但其价值恰好设定为 undefined。

hasOwnProperty在JavaScript中与性能交易和它的唯一的事情不是遍历原型链。

// Poisoning Object.prototype
Object.prototype.bar = 1;
var foo = {goo: undefined};

foo.bar; // 1
'bar' in foo; // true

foo.hasOwnProperty('bar'); // false
foo.hasOwnProperty('goo'); // true
只会hasOwnProperty给出正确和预期的结果。有关for in循环hasOwnProperty遍历对象属性时何时使用的更多详细信息， 请参见循环部分。

hasOwnProperty 作为财产
JavaScript不保护属性名称hasOwnProperty; 因此，如果可能存在某个对象可能具有该名称的属性，则必须使用外部 hasOwnProperty来获得正确的结果。

var foo = {
    hasOwnProperty: function() {
        return false;
    },
    bar: 'Here be dragons'
};

foo.hasOwnProperty('bar'); // always returns false

// Use another Object's hasOwnProperty and call it with 'this' set to foo
({}).hasOwnProperty.call(foo, 'bar'); // true

// It's also possible to use hasOwnProperty from the Object
// prototype for this purpose
Object.prototype.hasOwnProperty.call(foo, 'bar'); // true
结论是
使用hasOwnProperty是检查对象上是否存在属性的唯一可靠方法。hasOwnProperty 如for in循环部分所述，建议在迭代对象属性时在很多情况下使用它。

该for in循环
就像in运算符一样，for in当迭代对象的属性时，循环遍历原型链。

注：该for in循环将不遍历有他们的任何属性enumerable的属性设置为false; 例如，length 数组的属性。

// Poisoning Object.prototype
Object.prototype.bar = 1;

var foo = {moo: 2};
for(var i in foo) {
    console.log(i); // prints both bar and moo
}
由于无法更改for in循环本身的行为，因此有必要过滤出循环体内不需要的属性。在ECMAScript 3及更高版本中，这是通过使用hasOwnProperty 方法完成的Object.prototype。

由于ECMAScript 5 Object.defineProperty可以与enumerableset一起使用， 以便false在Object没有枚举这些属性的情况下向对象（包括）添加属性。在这种情况下，在应用程序代码中假设任何可枚举属性已被添加是出于某种原因并省略是合理的hasOwnProperty，因为它会使代码更加冗长和不易读。在库代码中hasOwnProperty仍然应该使用，因为不能假定哪些枚举属性可能驻留在原型链上。

注意：由于for in总是遍历完整的原型链，因此每增加一层继承添加到对象时，它会变慢。

使用hasOwnProperty的过滤
// still the foo from above
for(var i in foo) {
    if (foo.hasOwnProperty(i)) {
        console.log(i);
    }
}
此版本是使用ECMAScript旧版本的唯一正确版本。由于使用hasOwnProperty，它只会打印出来moo。当hasOwnProperty被排除在外时，在原生原型 - 例如Object.prototype- 已经扩展的情况下，代码很容易出错。

在更新版本的ECMAScript中，可以定义不可枚举的属性 Object.defineProperty，从而降低不使用属性迭代的风险hasOwnProperty。尽管如此，在使用像Prototype这样的旧版库时，必须小心，它还没有利用新的ECMAScript特性。当包含这个框架时，保证for in不使用的循环 hasOwnProperty会中断。

结论是
建议经常使用hasOwnProperty的库代码ECMAScript中3或更低，以及。在这些环境中，决不应该假设原生原型是否被扩展。由于ECMAScript 5，Object.defineProperty 可以定义不可枚举的属性，并hasOwnProperty在应用程序代码中省略。

功能
函数声明和表达式
JavaScript中的函数是第一类对象。这意味着它们可以像任何其他值一样传递。此功能的一个常见用途是将匿名函数作为回调传递给另一个函数，可能是异步函数。

该function宣言
function foo() {}
在程序执行开始之前，上述函数被挂起 ; 因此，即使在源中的实际定义之前调用，它在其定义的范围内的 任何地方都可用。

foo(); // Works because foo was created before this code runs
function foo() {}
该function表达
var foo = function() {};
这个例子将匿名和匿名函数分配给变量foo。

foo; // 'undefined'
foo(); // this raises a TypeError
var foo = function() {};
由于 在代码的实际执行开始之前var提升变量名称的声明已在执行脚本时声明。foofoo

但由于赋值只在运行时发生，因此在执行相应的代码之前，其值foo将默认为未定义。

命名函数表达式
另一个特殊情况是命名函数的分配。

var foo = function bar() {
    bar(); // Works
}
bar(); // ReferenceError
这里，bar在外部范围中不可用，因为函数只被分配给foo; 然而，在里面bar，它是可用的。这是由于JavaScript中的名称解析起作用，函数的名称始终在函数本身的本地范围内可用。

如何this工作
JavaScript this与其他大多数编程语言相比，对特殊名称的含义有不同的概念。在语言中可以绑定的价值有五种不同的方式this。

全球范围
this;
this在全局作用域中使用时，它将仅引用全局对象。

调用函数
foo();
在这里，this将再次提到全局对象。

ES5注意：在严格模式下，全局案例不再存在。 this将取而代之的是undefined在这种情况下的价值。

调用方法
test.foo(); 
在这个例子中，this会参考test。

调用构造函数
new foo(); 
以new关键字开头的函数调用充当构造函数。在函数里面，this会引用一个新创建的 Object。

显式设置 this
function foo(a, b, c) {}

var bar = {};
foo.apply(bar, [1, 2, 3]); // array will expand to the below
foo.call(bar, 1, 2, 3); // results in a = 1, b = 2, c = 3
当使用callor apply方法时Function.prototype，被this调用函数内部的值 被显式设置为相应函数调用的第一个参数。

其结果是，在上面的例子中的方法的情况下也不能适用，而this 内部foo将被设定为bar。

注意： this 不能用于引用Object 文字内的对象。因此，var obj = {me: this}将不会导致me提到 obj，因为this只有得到由五列有一个约束。

常见的陷阱
虽然大多数情况下都是合理的，但第一种情况可能会被认为是该语言的另一种错误设计，因为它从来没有任何实际用途。

Foo.method = function() {
    function test() {
        // this is set to the global object
    }
    test();
}
一个常见的误解是，this里面test指的是Foo; 而事实上，事实并非如此。

为了获取Foo来自内部test，你可以在里面创建一个局部变量method引用Foo。

Foo.method = function() {
    var self = this;
    function test() {
        // Use self instead of this here
    }
    test();
}
self只是一个普通的变量名，但它通常用于引用外层this。结合闭包，它也可以用来传递this值。

从ECMAScript 5开始，您可以使用bind与匿名函数结合使用的方法来获得相同的结果。

Foo.method = function() {
    var test = function() {
        // this now refers to Foo
    }.bind(this);
    test();
}
分配方法
，它的另一件事不是在JavaScript工作功能混淆，这是 分配给一个变量的方法。

var test = someObject.methodTest;
test();
由于第一种情况，test现在就像一个普通的函数调用一样; 因此， this它内部将不再提及someObject。

虽然this起初的绑定看起来似乎是一个糟糕的主意，但事实上，这正是原型继承工作的原因。

function Foo() {}
Foo.prototype.method = function() {};

function Bar() {}
Bar.prototype = Foo.prototype;

new Bar().method();
当method一个实例被调用时Bar，this现在将引用该实例。

关闭和参考
JavaScript最强大的功能之一是闭包的可用性。通过闭包，范围始终保持对定义的外部范围的访问。由于JavaScript具有的唯一范围是 函数范围，因此默认情况下，所有函数都充当闭包。

模拟私有变量
function Counter(start) {
    var count = start;
    return {
        increment: function() {
            count++;
        },

        get: function() {
            return count;
        }
    }
}

var foo = Counter(4);
foo.increment();
foo.get(); // 5
这里Counter返回两个闭包：函数increment和函数get。这两个函数都保持对范围的 引用Counter，因此始终保持count对该范围中定义的变量的访问权限。

为什么私人变量工作
由于无法在JavaScript中引用或分配范围，因此 无法count从外部访问变量。与它交互的唯一方法是通过两次关闭。

var foo = new Counter(4);
foo.hack = function() {
    count = 1337;
};
上面的代码不会更改count范围中的变量Counter，因为foo.hack未在该范围内定义。它将改为创建或覆盖全局变量count。

环内闭合
人们经常犯的错误是在循环内部使用闭包，就好像它们正在复制循环索引变量的值一样。

for(var i = 0; i < 10; i++) {
    setTimeout(function() {
        console.log(i);  
    }, 1000);
}
上面的代码将不会输出数字0通过9，而将只打印数10十倍。

该匿名函数保持一个参考来i。在console.log被调用的时候 ，for loop已经完成了，并且值 i已经被设置为10。

为了获得所需的行为，有必要创建一个值的副本i。

避免参考问题
为了复制循环索引变量的值，最好使用 匿名包装器。

for(var i = 0; i < 10; i++) {
    (function(e) {
        setTimeout(function() {
            console.log(e);  
        }, 1000);
    })(i);
}
匿名外部函数会立即被调用i作为其第一个参数，并将接收作为其参数值的副本。ie

得到数据传递给匿名函数setTimeout现在有一个参考 e，它的价值也没有被循环得到改变。

还有另外一种可能的方法来实现这一点，即从匿名包装器返回一个函数，然后它将具有与上述代码相同的行为。

for(var i = 0; i < 10; i++) {
    setTimeout((function(e) {
        return function() {
            console.log(e);
        }
    })(i), 1000)
}
实现这一点的另一种流行方式是向setTimeout函数添加一个额外的参数，该参数将这些参数传递给回调函数。

for(var i = 0; i < 10; i++) {
    setTimeout(function(e) {
        console.log(e);  
    }, 1000, i);
}
一些传统的JS环境（Internet Explorer 9及以下版本）不支持这一点。

还有另一种通过使用.bind可以实现这一点的方法，它可以将this上下文和参数绑定到函数上。它的行为与上面的代码相同

for(var i = 0; i < 10; i++) {
    setTimeout(console.log.bind(console, i), 1000);
}
该arguments对象
JavaScript中的每个函数作用域都可以访问特殊变量arguments。这个变量保存了传递给函数的所有参数的列表。

注意：如果arguments已经通过var语句或作为形式参数的名称在函数的作用域内定义了该arguments对象，则不会创建该对象。

的arguments对象是不一个Array。虽然它具有某个数组的某些语义 - 即length属性 - 它不是继承自 Array.prototype并且实际上是一个Object。

由于这个原因，它是不能够使用标准阵列方法等push， pop或slice上arguments。尽管使用纯for循环进行迭代时效果很好，但Array为了使用标准Array方法，必须将其转换为实数。

转换为数组
下面的代码将返回一个新Array的arguments对象的所有元素 。

Array.prototype.slice.call(arguments);
由于此转换速度较慢，因此不建议在代码的性能关键部分中使用它。

传递参数
以下是将参数从一个函数传递到另一个函数的推荐方法。

function foo() {
    bar.apply(null, arguments);
}
function bar(a, b, c) {
    // do stuff here
}
另一个诀窍是使用两者call并且apply一起将方法 - 使用值this和它们的参数的函数 - 转换成仅使用它们的参数的普通函数。

function Person(first, last) {
  this.first = first;
  this.last = last;
}

Person.prototype.fullname = function(joiner, options) {
  options = options || { order: "western" };
  var first = options.order === "western" ? this.first : this.last;
  var last =  options.order === "western" ? this.last  : this.first;
  return first + (joiner || " ") + last;
};

// Create an unbound version of "fullname", usable on any object with 'first'
// and 'last' properties passed as the first argument. This wrapper will
// not need to change if fullname changes in number or order of arguments.
Person.fullname = function() {
  // Result: Person.prototype.fullname.call(this, joiner, ..., argN);
  return Function.call.apply(Person.prototype.fullname, arguments);
};

var grace = new Person("Grace", "Hopper");

// 'Grace Hopper'
grace.fullname();

// 'Turing, Alan'
Person.fullname({ first: "Alan", last: "Turing" }, ", ", { order: "eastern" });
形式参数和参数索引
该arguments对象为其属性以及函数的形式参数创建getter和setter函数。

因此，更改形式参数的值也会更改arguments对象上相应属性的值，反之亦然。

function foo(a, b, c) {
    arguments[0] = 2;
    a; // 2

    b = 4;
    arguments[1]; // 4

    var d = c;
    d = 9;
    c; // 3
}
foo(1, 2, 3);
表演神话和真相
arguments对象未被创建的唯一时间是在函数内部或其形式参数之一中将其声明为名称的位置。它是否被使用并不重要。

双方的getter和setter方法是始终创建; 因此，使用它几乎没有任何性能影响，特别是在没有超过对arguments对象属性的简单访问权的实际代码中。

ES5注意：这些getter方法和setter方法不是在严格模式下创建的。

但是，有一种情况会大幅降低现代JavaScript引擎的性能。这种情况是使用arguments.callee。

function foo() {
    arguments.callee; // do something with this function object
    arguments.callee.caller; // and the calling function object
}

function bigLoop() {
    for(var i = 0; i < 100000; i++) {
        foo(); // Would normally be inlined...
    }
}
在上面的代码中，foo不再是内联的主题，因为它需要知道它自己和它的调用者。这不仅会破坏内联可能带来的性能提升，而且会破坏封装，因为函数现在可能依赖于特定的调用上下文。

利用arguments.callee或其任何特性是非常令人沮丧的。

ES5注意：在严格模式下，arguments.callee会抛出一个，TypeError因为它的使用已被弃用。

构造函数
JavaScript中的构造函数与其他许多语言不同。任何以new关键字开头的函数调用都充当构造函数。

在构造函数内部 - 被调用的函数 - 值this指的是一个新创建的对象。这个新 对象的原型被设置为作为构造函数调用的函数对象。prototype

如果被调用的函数没有显式return声明，那么它隐含地返回this- 新对象的值。

function Person(name) {
    this.name = name;
}

Person.prototype.logName = function() {
    console.log(this.name);
};

var sean = new Person();
上面调用Person构造函数并将prototype新创建的对象设置为Person.prototype。

在显式return语句的情况下，该函数返回该语句指定的值，但只有返回值为Object。

function Car() {
    return 'ford';
}
new Car(); // a new object, not 'ford'

function Person() {
    this.someValue = 2;

    return {
        name: 'Charles'
    };
}
new Person(); // the returned object ({name:'Charles'}), not including someValue
当new省略关键字时，该函数不会返回新的对象。

function Pirate() {
    this.hasEyePatch = true; // gets set on the global object!
}
var somePirate = Pirate(); // somePirate is undefined
虽然上面的例子在某些情况下可能仍然有效，但由于thisJavaScript 的工作原理，它将使用 全局对象作为值this。

工厂
为了能够省略new关键字，构造函数必须显式地返回一个值。

function Robot() {
    var color = 'gray';
    return {
        getColor: function() {
            return color;
        }
    }
}

new Robot();
Robot();
这两个调用Robot返回相同的事情，新创建的对象，有一个叫做财产getColor，这是一个 封闭。

还应该指出的是，呼叫new Robot()也不会影响返回的对象的原型。虽然原型将设置在新创建的对象上，但Robot不会返回该新对象。

在上面的例子中，使用和不使用new关键字没有功能上的区别。

通过工厂创建新对象
经常建议不要使用，new因为忘记它的使用可能会导致错误。

为了创建一个新的对象，应该使用一个工厂并在该工厂内部构建一个新的对象。

function CarFactory() {
    var car = {};
    car.owner = 'nobody';

    var milesPerGallon = 2;

    car.setOwner = function(newOwner) {
        this.owner = newOwner;
    }

    car.getMPG = function() {
        return milesPerGallon;
    }

    return car;
}
尽管上述方法对缺少的new关键字具有强大的功能，并且使得私有变量的使用更容易，但它带来了一些缺点。

它使用更多的内存，因为创建的对象不共享原型上的方法。
为了继承，工厂需要复制另一个对象的所有方法或将该对象放在新对象的原型上。
仅仅因为遗漏new关键字而丢弃原型链就违背了语言的精神。
结论是
虽然省略new关键字可能会导致错误，但完全不用放弃使用原型。最后归结到哪种解决方案更适合应用程序的需求。选择特定风格的对象创建并一致使用它尤其重要 。

范围和命名空间
尽管JavaScript可以很好地处理块的两个匹配花括号的语法，但它不支持块范围; 因此，所有留在语言中的是函数范围。

function test() { // a scope
    for(var i = 0; i < 10; i++) { // not a scope
        // count
    }
    console.log(i); // 10
}
注意：当不用于赋值，返回语句或作为函数参数时，{...}符号将被解释为块语句而 不是对象文字。这与分号的自动插入一起 可能导致微妙的错误。

JavaScript中也没有独特的名称空间，这意味着所有东西都在一个全局共享名称空间中定义。

每次引用变量时，JavaScript都会遍历所有范围，直到找到它。如果它达到全球范围，但仍未找到请求的名称，它将引发一次ReferenceError。

全球变量的祸根
// script A
foo = '42';

// script B
var foo = '42'
以上两个脚本不具有相同的效果。脚本A定义了一个foo在全局范围内调用的变量，脚本B foo在 当前范围内定义了一个变量。

再次，这是不是在所有相同的效果：不使用var能有重大影响。

// global scope
var foo = 42;
function test() {
    // local scope
    foo = 21;
}
test();
foo; // 21
var将函数内部的语句省略掉test将会覆盖函数的值foo。虽然一开始这看起来并不算什么大问题，但拥有数千行JavaScript而不使用的代码var将会引入可怕的，难以追查的错误。

// global scope
var items = [/* some list */];
for(var i = 0; i < 10; i++) {
    subLoop();
}

function subLoop() {
    // scope of subLoop
    for(i = 0; i < 10; i++) { // missing var statement
        // do amazing stuff!
    }
}
外环将在第一次调用后终止subLoop，因为subLoop 覆盖了全局值i。使用var第二个for循环将很容易避免这个错误。除非所需的效果影响外部范围，否则绝不应排除该var声明。

局部变量
JavaScript中局部变量的唯一来源是 函数参数和通过var语句声明的变量 。

// global scope
var foo = 1;
var bar = 2;
var i = 2;

function test(i) {
    // local scope of the function test
    i = 5;

    var foo = 3;
    bar = 4;
}
test(10);
while foo和i是函数范围内的局部变量test，赋值bar将覆盖具有相同名称的全局变量。

吊装
JavaScript 提升声明。这意味着这两个var语句和 function声明都将被移动到其封闭范围的顶部。

bar();
var bar = function() {};
var someValue = 42;

test();
function test(data) {
    if (false) {
        goo = 1;

    } else {
        var goo = 2;
    }
    for(var i = 0; i < 100; i++) {
        var e = data[i];
    }
}
上面的代码在执行开始之前被转换。JavaScript将var语句以及function声明移动到最近的周围范围的顶部。

// var statements got moved here
var bar, someValue; // default to 'undefined'

// the function declaration got moved up too
function test(data) {
    var goo, i, e; // missing block scope moves these here
    if (false) {
        goo = 1;

    } else {
        goo = 2;
    }
    for(i = 0; i < 100; i++) {
        e = data[i];
    }
}

bar(); // fails with a TypeError since bar is still 'undefined'
someValue = 42; // assignments are not affected by hoisting
bar = function() {};

test();
缺失块范围不仅会将var语句从循环和它们的身体中移出，而且还会使某些if构造的结果不直观。

在原始代码中，尽管该if语句似乎修改了全局变量 goo，但它实际上修改了局部变量 - 在应用了吊装之后。

没有知识的提升，人们可能会怀疑下面的代码将提高 ReferenceError。

// check whether SomeImportantThing has been initialized
if (!SomeImportantThing) {
    var SomeImportantThing = {};
}
但是，当然，这是有用的，因为该var声明正在被移到全球范围的顶端。

var SomeImportantThing;

// other code might initialize SomeImportantThing here, or not

// make sure it's there
if (!SomeImportantThing) {
    SomeImportantThing = {};
}
名称解析顺序
JavaScript中的所有作用域（包括全局作用域）都具有this在其中定义的特殊名称 ，它指向当前对象。

函数作用域也具有arguments在其中定义的名称，其中包含传递给该函数的参数。

例如，当试图访问foo在函数范围内命名的变量时，JavaScript将按照以下顺序查找名称：

如果var foo在当前范围内有语句，请使用该语句。
如果其中一个函数参数被命名foo，则使用它。
如果函数本身被调用foo，那就使用它。
转到下一个外部范围，然后从＃1开始。
注意：调用参数arguments将阻止创建默认arguments对象。

命名空间
与只有一个全局名称空间相关的常见问题是，遇到变量名称冲突的问题的可能性。在JavaScript中，通过匿名包装可以轻松避免这个问题。

(function() {
    // a self contained "namespace"

    window.foo = function() {
        // an exposed closure
    };

})(); // execute the function immediately
未命名的函数被视为表达式 ; 所以为了能够被调用，他们必须首先被评估。

( // evaluate the function inside the parentheses
function() {}
) // and return the function object
() // call the result of the evaluation
还有其他方法可以评估和直接调用函数表达式，尽管语法不同，它们的行为方式也是相同的。

// A few other styles for directly invoking the 
!function(){}()
+function(){}()
(function(){}());
// and so on...
结论是
建议始终使用匿名封装将代码封装在其自己的名称空间中。这不仅可以防止名称冲突的代码，而且还可以更好地模块化程序。

此外，使用全局变量被认为是不好的做法。任何 对它们的使用都表示代码写得很差，很容易出错并且难以维护。

数组
数组迭代和属性
虽然JavaScript中的数组是对象，但没有充分的理由使用for in循环。实际上，有几个很好的理由不使用for in阵列。

注意： JavaScript数组不是 关联数组。JavaScript只有对象才能将键映射到值。尽管关联数组保持顺序，但对象不会。

因为for in循环枚举了原型链上的所有属性，并且因为排除这些属性的唯一方法是使用 hasOwnProperty，所以它已经 比普通循环慢了20倍for。

迭代
为了在迭代数组时获得最佳性能，最好使用经典for循环。

var list = [1, 2, 3, 4, 5, ...... 100000000];
for(var i = 0, l = list.length; i < l; i++) {
    console.log(list[i]);
}
在上面的例子中有一个额外的捕获，即通过数组缓存数组的长度l = list.length。

虽然该length属性是在数组本身上定义的，但在循环的每次迭代中进行查找仍有开销。虽然最近的JavaScript引擎可能会在这种情况下应用优化，但是无法告诉代码是否会在这些新引擎之一上运行。

实际上，忽略缓存可能会导致循环只有缓存长度的一半。

该length物业
而吸气剂的的length属性简单地返回被包含在数组中的元素的数量，设定器可用于 截断该阵列。

var arr = [1, 2, 3, 4, 5, 6];
arr.length = 3;
arr; // [1, 2, 3]

arr.length = 6;
arr.push(4);
arr; // [1, 2, 3, undefined, undefined, undefined, 4]
指定较小的长度会截断该数组。增加它会创建一个稀疏数组。

结论是
为了获得最佳性能，建议始终使用普通for循环并缓存length属性。for in数组上的使用是代码写得不好的标志，容易出现错误和性能不佳。

该Array构造
由于Array构造函数在处理参数方面不明确，强烈建议[]在创建新数组时使用数组literal - notation。

[1, 2, 3]; // Result: [1, 2, 3]
new Array(1, 2, 3); // Result: [1, 2, 3]

[3]; // Result: [3]
new Array(3); // Result: []
new Array('3') // Result: ['3']
当只有一个参数传递给Array构造函数，并且该参数为a时Number，构造函数将返回一个新的稀疏 数组，其length属性设置为参数的值。应该注意的是，只有length新阵列的属性才会这样设置; 数组的实际索引不会被初始化。

var arr = new Array(3);
arr[1]; // undefined
1 in arr; // false, the index was not set
能够预先设置数组的长度仅在少数情况下有用，例如重复字符串，避免使用循环。

new Array(count + 1).join(stringToRepeat);
结论是
文字优先于Array构造函数。它们更短，语法更清晰，并增加了代码的可读性。

类型
平等与比较
JavaScript有两种不同的方式比较对象的值是否相等。

平等运营商
等号运算符包含两个等号： ==

JavaScript功能弱打字。这意味着等式操作符 强制类型以便比较它们。

""           ==   "0"           // false
0            ==   ""            // true
0            ==   "0"           // true
false        ==   "false"       // false
false        ==   "0"           // true
false        ==   undefined     // false
false        ==   null          // false
null         ==   undefined     // true
" \t\r\n"    ==   0             // true
上表显示了类型强制的结果，这是使用==被广泛认为是不好的做法的主要原因。由于其复杂的转换规则，它引入了难以追踪的错误。

另外，类型强制在场时也会对性能产生影响; 例如，必须将字符串转换为数字，然后才能将其与另一个数字进行比较。

严格的平等运营商
严格的等号操作符包含三个等号：===。

它与普通的相等运算符一样工作，除了严格的相等运算符不在其操作数之间执行类型强制。

""           ===   "0"           // false
0            ===   ""            // false
0            ===   "0"           // false
false        ===   "false"       // false
false        ===   "0"           // false
false        ===   undefined     // false
false        ===   null          // false
null         ===   undefined     // false
" \t\r\n"    ===   0             // false
上述结果更清晰并且允许代码的早期中断。这在一定程度上强化了代码，并且在操作数是不同类型的情况下也提高了性能。

比较对象
虽然两者==并===称为平等的运营商，他们不同的表现时，他们的操作数的至少一个是一个Object。

{} === {};                   // false
new String('foo') === 'foo'; // false
new Number(10) === 10;       // false
var foo = {};
foo === foo;                 // true
在这里，两个运营商比较身份而不是平等; 也就是说，他们会比较对象的相同实例，就像is在Python中一样，并且在C中进行指针比较。

结论是
强烈建议只使用严格的相等运算符。在需要强制类型的情况下，应该明确地完成， 而不是留给语言复杂的强制规则。

该typeof运营商
该typeof运营商（连同 instanceof）是可能的JavaScript中最大的设计缺陷，因为它几乎完全打破。

虽然instanceof用途仍然有限，但typeof实际上只有一个实际的用例，它并不会检查对象的类型。

注意：虽然typeof也可以用类似语法typeof(obj)的函数调用，即 ，这不是函数调用。圆括号表现正常，返回值将用作操作typeof符的操作数。有没有 typeof功能。

JavaScript类型表
Value               Class      Type
-------------------------------------
"foo"               String     string
new String("foo")   String     object
1.2                 Number     number
new Number(1.2)     Number     object
true                Boolean    boolean
new Boolean(true)   Boolean    object
new Date()          Date       object
new Error()         Error      object
[1,2,3]             Array      object
new Array(1, 2, 3)  Array      object
new Function("")    Function   function
/abc/g              RegExp     object (function in Nitro/V8)
new RegExp("meow")  RegExp     object (function in Nitro/V8)
{}                  Object     object
new Object()        Object     object
在上表中，Type表示typeof操作员返回的值。可以清楚地看出，这个值是一致的。

的类指的是内部的值[[Class]]的对象的属性。

从规范：值[[Class]]可以是以下字符串之一。Arguments，Array，Boolean，Date，Error， Function，JSON，Math，Number，Object，RegExp，String。

一个对象的类
确定对象[[Class]]值的唯一方法是使用Object.prototype.toString。它以下面的格式返回一个字符串：'[object ' + valueOfClass + ']'例如[object String]或 [object Array]：

function is(type, obj) {
    var clas = Object.prototype.toString.call(obj).slice(8, -1);
    return obj !== undefined && obj !== null && clas === type;
}

is('String', 'test'); // true
is('String', new String('test')); // true
在上述例子中，Object.prototype.toString被调用以的值 这被设置为对象[[Class]]值应检索。

ES5提示：为了方便的返回值Object.prototype.toString 的两个null和undefined被改变的Object，以Null和 Undefined在ECMAScript中5。

测试未定义的变量
typeof foo !== 'undefined'
以上将检查是否foo实际声明; 只是参考它会导致一个ReferenceError。这是唯一typeof有用的东西 。

结论是
为了检查对象的类型，强烈建议使用它， Object.prototype.toString因为这是唯一可靠的方法。如上面的类型表所示，typeof在规范中没有定义一些返回值; 因此，它们可以在不同的实现中有所不同

除非检查变量是否定义，typeof否则应该避免。

该instanceof运营商
该instanceof运算符比较两个操作数的构造函数。它仅在比较定制对象时才有用。用于内置类型，几乎与typeof操作符一样无用。

比较自定义对象
function Foo() {}
function Bar() {}
Bar.prototype = new Foo();

new Bar() instanceof Bar; // true
new Bar() instanceof Foo; // true

// This just sets Bar.prototype to the function object Foo,
// but not to an actual instance of Foo
Bar.prototype = Foo;
new Bar() instanceof Foo; // false
使用instanceof与原生类型
new String('foo') instanceof String; // true
new String('foo') instanceof Object; // true

'foo' instanceof String; // false
'foo' instanceof Object; // false
这里需要注意的一点是，instanceof对于源自不同JavaScript上下文的对象（例如Web浏览器中的不同文档）不起作用，因为它们的构造函数不会是完全相同的对象。

结论是
只有在处理源自相同JavaScript上下文的自定义对象时才应该使用该instanceof运算符。就像 操作员一样，应该避免使用它。typeof

类型铸造
JavaScript是一种弱类型语言，所以它适用强制类型转换 地方可能。

// These are true
new Number(10) == 10; // Number object is converted
                      // to a number primitive via implicit call of
                      // Number.prototype.valueOf method

10 == '10';           // Strings gets converted to Number
10 == '+10 ';         // More string madness
10 == '010';          // And more 
isNaN(null) == false; // null converts to 0
                      // which of course is not NaN

// These are false
10 == 010;
10 == '-10';
ES5注意：以a开头的数字文字0被解释为八进制（Base 8）。ECMAScript 5严格模式已删除了对这些的八进制支持。

为了避免上述问题，使用的严格等于运营商 的强烈推荐。尽管这避免了许多常见的陷阱，但JavaScript的弱类型系统仍然存在许多其他问题。

内置类型的构造函数
内置的类型，如构造函数Number和String不同的表现正与使用时new的关键字，没有它。

new Number(10) === 10;     // False, Object and Number
Number(10) === 10;         // True, Number and Number
new Number(10) + 0 === 10; // True, due to implicit conversion
使用类似Number构造函数的内置类型将创建一个新Number 对象，但省略new关键字将使该Number函数的行为类似于转换器。

另外，传递文字或非对象值会导致更多类型的强制。

最好的选择是明确地转换为三种可能类型中的一种。

投射到一个字符串
'' + 10 === '10'; // true
通过预先添加空字符串，可以轻松地将值转换为字符串。

投射到一个数字
+'10' === 10; // true
使用一元加运算符可以将其转换为数字。

投射到布尔值
通过使用not运算符两次，可以将值转换为布尔值。

!!'foo';   // true
!!'';      // false
!!'0';     // true
!!'1';     // true
!!'-1'     // true
!!{};      // true
!!true;    // true
核心
为什么不使用 eval
该eval函数将在本地范围内执行一串JavaScript代码。

var number = 1;
function test() {
    var number = 2;
    eval('number = 3');
    return number;
}
test(); // 3
number; // 1
但是，eval只有在直接调用本地作用域时以及被调用函数的名称是实际时才执行eval。

var number = 1;
function test() {
    var number = 2;
    var copyOfEval = eval;
    copyOfEval('number = 3');
    return number;
}
test(); // 2
number; // 3
使用eval应该避免。没有它，99.9％的“用途”可以实现 。

eval 在伪装
该超时功能 setTimeout和setInterval既可以采取一个字符串作为他们的第一个参数。该字符串将始终在全局范围内执行，因为eval在这种情况下不会直接调用该字符串。

安全问题
eval也是一个安全问题，因为它执行给它的任何代码。它应该永远不会与未知或不可信来源的字符串中使用。

结论是
eval不应该被使用。任何使用它的代码都应该在其工作，性能和安全性方面受到质疑。如果某些事情需要eval工作，则不应该首先使用它。一个更好的设计 应该使用，不需要使用的eval。

undefined 和 null
JavaScript有两个截然不同的值，null并且undefined后者更有用。

价值 undefined
undefined是一个只有一个值的类型：undefined。

该语言还定义了一个全局变量，其值为undefined; 这个变量也被称为undefined。但是，这个变量既不是常量，也不是该语言的关键字。这意味着它的值可以很容易地被覆盖。

ES5注意： undefined在ECMAScript 5中不再可以 在严格模式下写入，但其名称仍然可以通过名称的函数进行遮蔽 undefined。

以下undefined是返回值的一些示例：

访问（未修改的）全局变量undefined。
访问已声明但尚未初始化的变量。
由于缺少return语句而导致函数的隐式返回。
return 不显式返回任何内容的语句。
查找不存在的属性。
函数参数没有任何显式值传递。
任何已被设置为值的东西undefined。
任何形式的表达式 void(expression)
处理更改的价值 undefined
由于全局变量undefined仅保存实际值的 副本，因此undefined为其分配新值不会更改该类型 的值 undefined。

尽管如此，为了比较一些与价值相关的东西undefined，有必要检索第一个值undefined。

为了保护代码不受可能被覆盖的undefined变量的影响，常用的技巧是向匿名包装器添加一个附加参数，该参数不会传递给它。

var undefined = 123;
(function(something, foo, undefined) {
    // undefined in the local scope does 
    // now again refer to the value `undefined`

})('Hello World', 42);
另一种达到相同效果的方法是在包装器中使用声明。

var undefined = 123;
(function(something, foo) {
    var undefined;
    ...

})('Hello World', 42);
这里唯一的区别是，这个版本在被缩小的情况下会导致使用4个字节，并且var匿名包装器中没有其他语句。

使用 null
虽然undefined在JavaScript语言的上下文中主要使用传统的空值，但实际上null（文字和类型）或多或少只是另一种数据类型。

它用于一些JavaScript内部（如通过设置声明原型链的结尾Foo.prototype = null），但在几乎所有情况下，它都可以替换为undefined。

自动分号插入
虽然JavaScript有空调风格的语法，它并没有强制使用的源代码分号，因此可以省略它们。

JavaScript不是一个无分号的语言。事实上，它需要分号才能理解源代码。因此，由于缺少分号，JavaScript解析器会在遇到解析错误时自动插入它们。

var foo = function() {
} // parse error, semicolon expected
test()
插入发生，解析器再次尝试。

var foo = function() {
}; // no error, parser continues
test()
分号的自动插入被认为是 该语言中最大的设计缺陷之一，因为它可以改变代码的行为。

怎么运行的
下面的代码中没有分号，所以由解析器决定在哪里插入它们。

(function(window, undefined) {
    function test(options) {
        log('testing!')

        (options.list || []).forEach(function(i) {

        })

        options.value.test(
            'long string to pass here',
            'and another long string to pass'
        )

        return
        {
            foo: function() {}
        }
    }
    window.test = test

})(window)

(function(window) {
    window.someLibrary = {}

})(window)
下面是解析器的“猜测”游戏的结果。

(function(window, undefined) {
    function test(options) {

        // Not inserted, lines got merged
        log('testing!')(options.list || []).forEach(function(i) {

        }); // <- inserted

        options.value.test(
            'long string to pass here',
            'and another long string to pass'
        ); // <- inserted

        return; // <- inserted, breaks the return statement
        { // treated as a block

            // a label and a single expression statement
            foo: function() {} 
        }; // <- inserted
    }
    window.test = test; // <- inserted

// The lines got merged again
})(window)(function(window) {
    window.someLibrary = {}; // <- inserted

})(window); //<- inserted
注意： JavaScript解析器不能“正确”处理紧跟着新行的返回语句。虽然这不一定是自动分号插入的错误，但它仍然可能是不必要的副作用。

解析器彻底改变了上面代码的行为。在某些情况下，它做错了事。

引导括号
在括号前面的情况下，解析器不会插入分号。

log('testing!')
(options.list || []).forEach(function(i) {})
这段代码被转换成一行。

log('testing!')(options.list || []).forEach(function(i) {})
机会是非常之高，log并没有返回功能; 因此，上述将产生一个TypeError说明undefined is not a function。

结论是
强烈建议不要忽略分号。还建议将大括号与其相应的陈述保持在同一行，并且不要为了单行if/ else陈述而忽略它们。这些度量不仅会提高代码的一致性，还会阻止JavaScript解析器更改代码行为。

该delete运营商
简而言之，不可能在JavaScript中删除全局变量，函数和其他一些具有DontDelete属性集的东西。

全局代码和功能代码
当在全局或函数范围中定义变量或函数时，它是Activation对象或Global对象的属性。这些属性有一组属性，其中之一是 DontDelete。全局函数和函数代码中的变量和函数声明总是创建属性DontDelete，因此无法删除。

// global variable:
var a = 1; // DontDelete is set
delete a; // false
a; // 1

// normal function:
function f() {} // DontDelete is set
delete f; // false
typeof f; // "function"

// reassigning doesn't help:
f = 1;
delete f; // false
f; // 1
显式属性
显式设置属性可以正常删除。

// explicitly set property:
var obj = {x: 1};
obj.y = 2;
delete obj.x; // true
delete obj.y; // true
obj.x; // undefined
obj.y; // undefined
在上面的例子，obj.x并且obj.y可以将其删除，因为他们没有任何 DontDelete属性。这就是为什么下面的例子也适用。

// this works fine, except for IE:
var GLOBAL_OBJECT = this;
GLOBAL_OBJECT.a = 1;
a === GLOBAL_OBJECT.a; // true - just a global var
delete GLOBAL_OBJECT.a; // true
GLOBAL_OBJECT.a; // undefined
这里我们使用一个技巧来删除a。this这里指的是全局对象，我们显式声明变量a作为它的属性，允许我们删除它。

IE（至少6-8）有一些错误，所以上面的代码不起作用。

函数参数和内置
函数的正常参数，arguments对象 和内置属性也已DontDelete设置。

// function arguments and properties:
(function (x) {

  delete arguments; // false
  typeof arguments; // "object"

  delete x; // false
  x; // 1

  function f(){}
  delete f.length; // false
  typeof f.length; // "number"

})(1);
主机对象
delete托管对象的操作符的行为可能是不可预知的。由于规范，主机对象被允许执行任何类型的行为。

结论是
该delete运营商往往有意外的行为，只能安全地用于正常对象删除明确设置的属性。

其他
setTimeout 和 setInterval
由于JavaScript是异步的，因此可以使用setTimeout和setInterval函数来安排函数的执行。

注意：超时不是 ECMAScript标准的一部分。它们是在BOM或DOM级别0中实现的，它们从未定义过，也没有正式记录过。目前还没有推荐的规范发布，但是它们目前正在通过HTML5进行标准化。由于这种性质，实现可能因浏览器和引擎而异。

function foo() {}
var id = setTimeout(foo, 1000); // returns a Number > 0
当setTimeout被调用时，它会返回超时和计划的ID， foo以便将来运行大约一千毫秒。 foo然后将被执行一次。

根据运行代码的JavaScript引擎的计时器分辨率，以及JavaScript是单线程的事实以及其他执行的代码可能会阻塞该线程，绝不是一个安全的选择，一个人会得到指定的确切延迟在setTimeout通话中。

作为第一个参数传递的函数将被 全局对象调用，这意味着this被调用函数内部引用全局对象。

function Foo() {
    this.value = 42;
    this.method = function() {
        // this refers to the global object
        console.log(this.value); // will log undefined
    };
    setTimeout(this.method, 500);
}
new Foo();
注：由于setTimeout需要一个函数对象作为其第一个参数，一个常见的错误是使用setTimeout(foo(), 1000)，这将使用 返回值调用的foo和不 foo。这是大多数情况下的一个沉默错误，因为函数返回undefined setTimeout时 不会引发任何错误。

用堆叠呼叫 setInterval
虽然setTimeout只运行一次函数，setInterval顾名思义，它会每 X毫秒执行一次函数，但不鼓励使用函数。

当正在执行的代码阻塞超时调用时，setInterval仍会向指定的函数发出更多调用。这可以，特别是在间隔较小的情况下，会导致函数调用堆叠。

function foo(){
    // something that blocks for 1 second
}
setInterval(foo, 100);
在上面的代码中，foo会被调用一次，然后会阻塞一秒。

在foo阻止代码的同时，setInterval仍然会安排进一步的调用。现在，foo完成后，已经有十个呼叫等待执行。

处理可能的阻止代码
最简单的解决方案以及最可控的解决方案是setTimeout在函数本身内部使用。

function foo(){
    // something that blocks for 1 second
    setTimeout(foo, 100);
}
foo();
这不仅封装了setTimeout呼叫，而且还阻止了呼叫堆叠并提供了额外的控制。foo本身现在可以决定是否要再次运行。

手动清除超时
清除超时和时间间隔的工作方式是将相应的ID传递给 clearTimeout或clearInterval取决于set首先使用的是哪个函数。

var id = setTimeout(foo, 1000);
clearTimeout(id);
清除所有超时
由于没有用于清除所有超时和/或间隔的内置方法，因此必须使用强力才能实现此功能。

// clear "all" timeouts
for(var i = 1; i < 1000; i++) {
    clearTimeout(i);
}
但是可能仍然有超时不受此任意数字影响。另一种方法是考虑每次打电话时给予超时的ID都加1 setTimeout。

// clear "all" timeouts
var biggestTimeoutId = window.setTimeout(function(){}, 1),
i;
for(i = 1; i <= biggestTimeoutId; i++) {
    clearTimeout(i);
}
即使这在当今所有主流浏览器上都能正常工作，但并没有规定这些ID应该以这种方式排序，并且可能会改变。因此，建议跟踪所有超时ID，以便它们可以专门清除。

隐藏的使用 eval
setTimeout并且setInterval也可以采取一个字符串作为他们的第一个参数。永远不要使用此功能，因为它在内部使用eval。

注意：将字符串传递给它们时的确切工作方式在各种JavaScript实现中可能会有所不同。例如，Microsoft的JScript使用Function构造函数代替eval。

function foo() {
    // will get called
}

function bar() {
    function foo() {
        // never gets called
    }
    setTimeout('foo()', 1000);
}
bar();
由于在这种情况下eval不直接调用，传递给的字符串setTimeout将在全局范围内执行; 因此，它不会使用foo范围内的局部变量bar。

还建议不要使用字符串将参数传递给将由任一超时函数调用的函数。

function foo(a, b, c) {}

// NEVER use this
setTimeout('foo(1, 2, 3)', 1000)

// Instead use an anonymous function
setTimeout(function() {
    foo(1, 2, 3);
}, 1000)
注意：虽然也可以使用setTimeout(foo, 1000, 1, 2, 3) 语法，但不推荐使用，因为它的使用在与方法一起使用时可能会导致细微的错误。此外，这些语法在某些JavaScript实现中可能不起作用。例如，微软的IE浏览器并不能直接传递参数给回调。

结论是
字符串应该永远不会被用作参数setTimeout或 setInterval。当需要将参数提供给被调用的函数时，这是一个非常糟糕的代码。应该传递一个匿名函数，然后处理实际的通话。

此外，setInterval应该避免使用，因为它的调度程序不会被执行JavaScript阻塞。

版权所有©。用|构建 使用玉石模板的Node.js。