享元模式是一种很好的性能优化方案，但它也会带来一些复杂性的问题，从前面两组代码的
比较可以看到，使用了享元模式之后，我们需要分别多维护一个 factory 对象和一个 manager 对
象，在大部分不必要使用享元模式的环境下，这些开销是可以避免的。
享元模式带来的好处很大程度上取决于如何使用以及何时使用，一般来说，以下情况发生时
便可以使用享元模式。
 一个程序中使用了大量的相似对象。
 由于使用了大量对象，造成很大的内存开销。
 对象的大多数状态都可以变为外部状态。
 剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。
可以看到，文件上传的例子完全符合这四点。
12.6 再谈内部状态和外部状态
如果顺利的话，通过前面的例子我们已经了解了内部状态和外部状态的概念以及享元模式的
工作原理。我们知道，实现享元模式的关键是把内部状态和外部状态分离开来。有多少种内部状
态的组合，系统中便最多存在多少个共享对象，而外部状态储存在共享对象的外部，在必要时被
传入共享对象来组装成一个完整的对象。现在来考虑两种极端的情况，即对象没有外部状态和没
有内部状态的时候。