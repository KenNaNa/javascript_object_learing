在订餐的故事中，如果订单的数量过多而厨师的人手不够，则可以让这些订单进行排队处理。
第一个订单完成之后，再开始执行跟第二个订单有关的操作。
队列在动画中的运用场景也非常多，比如之前的小球运动程序有可能遇到另外一个问题：有
些用户反馈，这个程序只适合于 APM 小于 20 的人群，大部分用户都有快速连续点击按钮的习惯，
当用户第二次点击 button 的时候，此时小球的前一个动画可能尚未结束，于是前一个动画会骤然
停止，小球转而开始第二个动画的运动过程。但这并不是用户的期望，用户希望这两个动画会排
队进行。
把请求封装成命令对象的优点在这里再次体现了出来，对象的生命周期几乎是永久的，除非
我们主动去回收它。也就是说，命令对象的生命周期跟初始请求发生的时间无关， command 对象
的 execute 方法可以在程序运行的任何时刻执行，即使点击按钮的请求早已发生，但我们的命令
对象仍然是有生命的。
所以我们可以把 div 的这些运动过程都封装成命令对象，再把它们压进一个队列堆栈，当动
画执行完，也就是当前 command 对象的职责完成之后，会主动通知队列，此时取出正在队列中等
待的第一个命令对象，并且执行它。
我们比较关注的问题是，一个动画结束后该如何通知队列。通常可以使用回调函数来通知队
列，除了回调函数之外，还可以选择发布订阅模式。即在一个动画结束后发布一个消息，订阅
者接收到这个消息之后，便开始执行队列里的下一个动画。读者可以尝试按照这个思路来自行实
现一个队列动画